"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from typing import Final, Optional, Union


class SourceLinkedinPagesSchemasAuthMethod(str, Enum):
    ACCESS_TOKEN = 'access_token'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceLinkedinPagesAccessToken:
    access_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_token') }})
    r"""The token value generated using the LinkedIn Developers OAuth Token Tools. See the <a href=\\"https://docs.airbyte.com/integrations/sources/linkedin-pages/\\">docs</a> to obtain yours."""
    AUTH_METHOD: Final[Optional[SourceLinkedinPagesSchemasAuthMethod]] = dataclasses.field(default=SourceLinkedinPagesSchemasAuthMethod.ACCESS_TOKEN, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_method'), 'exclude': lambda f: f is None }})
    



class SourceLinkedinPagesAuthMethod(str, Enum):
    O_AUTH2_0 = 'oAuth2.0'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceLinkedinPagesOAuth20:
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_id') }})
    r"""The client ID of the LinkedIn developer application."""
    client_secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_secret') }})
    r"""The client secret of the LinkedIn developer application."""
    refresh_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token') }})
    r"""The token value generated using the LinkedIn Developers OAuth Token Tools. See the <a href=\\"https://docs.airbyte.com/integrations/sources/linkedin-pages/\\">docs</a> to obtain yours."""
    AUTH_METHOD: Final[Optional[SourceLinkedinPagesAuthMethod]] = dataclasses.field(default=SourceLinkedinPagesAuthMethod.O_AUTH2_0, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_method'), 'exclude': lambda f: f is None }})
    



class LinkedinPages(str, Enum):
    LINKEDIN_PAGES = 'linkedin-pages'


class TimeGranularityType(str, Enum):
    r"""Granularity of the statistics for metrics per time period. Must be either \\"DAY\\" or \\"MONTH\\" """
    DAY = 'DAY'
    MONTH = 'MONTH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceLinkedinPages:
    org_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('org_id') }})
    r"""Specify the Organization ID"""
    credentials: Optional[SourceLinkedinPagesAuthentication] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credentials'), 'exclude': lambda f: f is None }})
    SOURCE_TYPE: Final[LinkedinPages] = dataclasses.field(default=LinkedinPages.LINKEDIN_PAGES, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    start_date: Optional[datetime] = dataclasses.field(default=dateutil.parser.isoparse('2023-01-01T00:00:00Z'), metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'exclude': lambda f: f is None }})
    r"""Start date for getting metrics per time period. Must be atmost 12 months before the request date (UTC) and atleast 2 days prior to the request date (UTC). See https://bit.ly/linkedin-pages-date-rules {{\"{{\"}} \\"\n\\" }} {{\"{{\"}} response.errorDetails }}"""
    time_granularity_type: Optional[TimeGranularityType] = dataclasses.field(default=TimeGranularityType.DAY, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_granularity_type'), 'exclude': lambda f: f is None }})
    r"""Granularity of the statistics for metrics per time period. Must be either \\"DAY\\" or \\"MONTH\\" """
    


SourceLinkedinPagesAuthentication = Union[SourceLinkedinPagesOAuth20, SourceLinkedinPagesAccessToken]
