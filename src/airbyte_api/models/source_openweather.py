"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Final, Optional


class Lang(str, Enum):
    r"""You can use lang parameter to get the output in your language. The contents of the description field will be translated. See <a href=\\"https://openweathermap.org/api/one-call-api#multi\\">here</a> for the list of supported languages."""
    AF = 'af'
    AL = 'al'
    AR = 'ar'
    AZ = 'az'
    BG = 'bg'
    CA = 'ca'
    CZ = 'cz'
    DA = 'da'
    DE = 'de'
    EL = 'el'
    EN = 'en'
    EU = 'eu'
    FA = 'fa'
    FI = 'fi'
    FR = 'fr'
    GL = 'gl'
    HE = 'he'
    HI = 'hi'
    HR = 'hr'
    HU = 'hu'
    ID = 'id'
    IT = 'it'
    JA = 'ja'
    KR = 'kr'
    LA = 'la'
    LT = 'lt'
    MK = 'mk'
    NO = 'no'
    NL = 'nl'
    PL = 'pl'
    PT = 'pt'
    PT_BR = 'pt_br'
    RO = 'ro'
    RU = 'ru'
    SV = 'sv'
    SE = 'se'
    SK = 'sk'
    SL = 'sl'
    SP = 'sp'
    ES = 'es'
    SR = 'sr'
    TH = 'th'
    TR = 'tr'
    UA = 'ua'
    UK = 'uk'
    VI = 'vi'
    ZH_CN = 'zh_cn'
    ZH_TW = 'zh_tw'
    ZU = 'zu'


class Openweather(str, Enum):
    OPENWEATHER = 'openweather'


class Units(str, Enum):
    r"""Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default."""
    STANDARD = 'standard'
    METRIC = 'metric'
    IMPERIAL = 'imperial'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceOpenweather:
    appid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appid') }})
    r"""API KEY"""
    lat: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lat') }})
    r"""Latitude, decimal (-90; 90). If you need the geocoder to automatic convert city names and zip-codes to geo coordinates and the other way around, please use the OpenWeather Geocoding API"""
    lon: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lon') }})
    r"""Longitude, decimal (-180; 180). If you need the geocoder to automatic convert city names and zip-codes to geo coordinates and the other way around, please use the OpenWeather Geocoding API"""
    lang: Optional[Lang] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lang'), 'exclude': lambda f: f is None }})
    r"""You can use lang parameter to get the output in your language. The contents of the description field will be translated. See <a href=\\"https://openweathermap.org/api/one-call-api#multi\\">here</a> for the list of supported languages."""
    only_current: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('only_current'), 'exclude': lambda f: f is None }})
    r"""True for particular day"""
    SOURCE_TYPE: Final[Openweather] = dataclasses.field(default=Openweather.OPENWEATHER, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    units: Optional[Units] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('units'), 'exclude': lambda f: f is None }})
    r"""Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default."""
    

