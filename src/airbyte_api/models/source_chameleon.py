"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from typing import Final, Optional


class Filter(str, Enum):
    r"""Filter for using in the `segments_experiences` stream"""
    TOUR = 'tour'
    SURVEY = 'survey'
    LAUNCHER = 'launcher'


class Chameleon(str, Enum):
    CHAMELEON = 'chameleon'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceChameleon:
    api_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_key') }})
    start_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'exclude': lambda f: f is None }})
    r"""End date for incremental sync"""
    filter_: Optional[Filter] = dataclasses.field(default=Filter.TOUR, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter'), 'exclude': lambda f: f is None }})
    r"""Filter for using in the `segments_experiences` stream"""
    limit: Optional[str] = dataclasses.field(default='50', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""Max records per page limit"""
    SOURCE_TYPE: Final[Chameleon] = dataclasses.field(default=Chameleon.CHAMELEON, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    

