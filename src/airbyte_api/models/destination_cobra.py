"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Final, List, Optional


class AuthType(str, Enum):
    CLIENT = 'Client'


class Cobra(str, Enum):
    COBRA = 'cobra'


class UpdateMode(str, Enum):
    r"""How to update the data in the destination."""
    INSERT = 'INSERT'
    UPDATE = 'UPDATE'
    UPSERT = 'UPSERT'
    DELETE = 'DELETE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StreamMapping:
    r"""Describes the relationship between a source stream and a destination table and how to update the information."""
    destination_table: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_table') }})
    r"""The name for the table to update the data in the destination."""
    source_stream: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_stream') }})
    r"""The name for the input stream."""
    update_mode: UpdateMode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('update_mode') }})
    r"""How to update the data in the destination."""
    upsert_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upsert_key'), 'exclude': lambda f: f is None }})
    r"""Given the operation is an upsert, a field representing an external ID needs to be provided"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DestinationCobra:
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_id') }})
    r"""Enter your Salesforce developer application's <a href=\\"https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG\\">Client ID</a>"""
    client_secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_secret') }})
    r"""Enter your Salesforce developer application's <a href=\\"https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG\\">Client secret</a>"""
    refresh_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token') }})
    r"""Enter your application's <a href=\\"https://developer.salesforce.com/docs/atlas.en-us.mobile_sdk.meta/mobile_sdk/oauth_refresh_token_flow.htm\\">Salesforce Refresh Token</a> used for Airbyte to access your Salesforce account."""
    stream_mappings: List[StreamMapping] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream_mappings') }})
    stream_order: List[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream_order') }})
    r"""The order in which the streams should be synced. Streams are synced in the order they are listed. Only those streams will be synced so make sure all the input streams are configured here."""
    AUTH_TYPE: Final[Optional[AuthType]] = dataclasses.field(default=AuthType.CLIENT, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_type'), 'exclude': lambda f: f is None }})
    DESTINATION_TYPE: Final[Cobra] = dataclasses.field(default=Cobra.COBRA, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationType') }})
    is_sandbox: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_sandbox'), 'exclude': lambda f: f is None }})
    r"""Toggle if you're using a <a href=\\"https://help.salesforce.com/s/articleView?id=sf.deploy_sandboxes_parent.htm&type=5\\">Salesforce Sandbox</a>"""
    print_record_content_on_error: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('print_record_content_on_error'), 'exclude': lambda f: f is None }})
    r"""If enabled, the records content will be printed as part of the log in case of failure which allows for easier debugging."""
    

