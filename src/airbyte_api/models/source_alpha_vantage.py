"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Final, Optional


class Interval(str, Enum):
    r"""Time-series data point interval. Required for intraday endpoints."""
    ONEMIN = '1min'
    FIVEMIN = '5min'
    FIFTEENMIN = '15min'
    THIRTYMIN = '30min'
    SIXTYMIN = '60min'


class OutputSize(str, Enum):
    r"""Whether to return full or compact data (the last 100 data points)."""
    COMPACT = 'compact'
    FULL = 'full'


class AlphaVantage(str, Enum):
    ALPHA_VANTAGE = 'alpha-vantage'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceAlphaVantage:
    api_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_key') }})
    r"""API Key"""
    symbol: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbol') }})
    r"""Stock symbol (with exchange code)"""
    adjusted: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adjusted'), 'exclude': lambda f: f is None }})
    r"""Whether to return adjusted data. Only applicable to intraday endpoints."""
    interval: Optional[Interval] = dataclasses.field(default=Interval.ONEMIN, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interval'), 'exclude': lambda f: f is None }})
    r"""Time-series data point interval. Required for intraday endpoints."""
    outputsize: Optional[OutputSize] = dataclasses.field(default=OutputSize.COMPACT, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputsize'), 'exclude': lambda f: f is None }})
    r"""Whether to return full or compact data (the last 100 data points)."""
    SOURCE_TYPE: Final[AlphaVantage] = dataclasses.field(default=AlphaVantage.ALPHA_VANTAGE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    

