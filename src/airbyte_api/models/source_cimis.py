"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from typing import Any, Final, List, Optional


class Cimis(str, Enum):
    CIMIS = 'cimis'


class TargetsType(str, Enum):
    WSN_STATION_NUMBERS = 'WSN station numbers'
    CALIFORNIA_ZIP_CODES = 'California zip codes'
    DECIMAL_DEGREE_COORDINATES = 'decimal-degree coordinates'
    STREET_ADDRESSES = 'street addresses'


class UnitOfMeasure(str, Enum):
    E = 'E'
    M = 'M'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceCimis:
    api_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_key') }})
    end_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_date'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    start_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    targets: List[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targets') }})
    targets_type: TargetsType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targets_type') }})
    daily_data_items: Optional[List[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('daily_data_items'), 'exclude': lambda f: f is None }})
    hourly_data_items: Optional[List[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hourly_data_items'), 'exclude': lambda f: f is None }})
    SOURCE_TYPE: Final[Cimis] = dataclasses.field(default=Cimis.CIMIS, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    unit_of_measure: Optional[UnitOfMeasure] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit_of_measure'), 'exclude': lambda f: f is None }})
    

