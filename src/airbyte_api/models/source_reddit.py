"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from typing import Any, Final, List, Optional


class Reddit(str, Enum):
    REDDIT = 'reddit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceReddit:
    api_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_key') }})
    start_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    exact: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exact'), 'exclude': lambda f: f is None }})
    r"""Specifies exact keyword and reduces distractions"""
    include_over_18: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('include_over_18'), 'exclude': lambda f: f is None }})
    r"""Includes mature content"""
    limit: Optional[float] = dataclasses.field(default=1000, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""Max records per page limit"""
    query: Optional[str] = dataclasses.field(default='airbyte', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query'), 'exclude': lambda f: f is None }})
    r"""Specifies the query for searching in reddits and subreddits"""
    SOURCE_TYPE: Final[Reddit] = dataclasses.field(default=Reddit.REDDIT, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    subreddits: Optional[List[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subreddits'), 'exclude': lambda f: f is None }})
    r"""Subreddits for exploration"""
    

