"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from typing import Any, Final, List, Optional


class Finnworlds(str, Enum):
    FINNWORLDS = 'finnworlds'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceFinnworlds:
    key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key') }})
    start_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    bond_type: Optional[List[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bond_type'), 'exclude': lambda f: f is None }})
    r"""For example 10y, 5y, 2y..."""
    commodities: Optional[List[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commodities'), 'exclude': lambda f: f is None }})
    r"""Options Available: beef, cheese, oil, ..."""
    countries: Optional[List[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countries'), 'exclude': lambda f: f is None }})
    r"""brazil, united states, italia, japan"""
    list: Optional[str] = dataclasses.field(default='ticker', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('list'), 'exclude': lambda f: f is None }})
    r"""Choose isin, ticker, reg_lei or cik"""
    list_countries_for_bonds: Optional[str] = dataclasses.field(default='country', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('list_countries_for_bonds'), 'exclude': lambda f: f is None }})
    SOURCE_TYPE: Final[Finnworlds] = dataclasses.field(default=Finnworlds.FINNWORLDS, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    tickers: Optional[List[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tickers'), 'exclude': lambda f: f is None }})
    r"""AAPL, T, MU, GOOG"""
    

