"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from typing import Final, Optional


class Circleci(str, Enum):
    CIRCLECI = 'circleci'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceCircleci:
    api_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_key') }})
    org_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('org_id') }})
    r"""The org ID found in `https://app.circleci.com/settings/organization/circleci/xxxxx/overview`"""
    project_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project_id') }})
    r"""Project ID found in the project settings"""
    start_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    job_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job_id'), 'exclude': lambda f: f is None }})
    r"""Job ID for fetching information"""
    job_number: Optional[str] = dataclasses.field(default='2', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job_number'), 'exclude': lambda f: f is None }})
    r"""Job Number of the workflow"""
    SOURCE_TYPE: Final[Circleci] = dataclasses.field(default=Circleci.CIRCLECI, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    workflow_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow_id'), 'exclude': lambda f: f is None }})
    r"""workflow ID of a project pipeline"""
    workflow_name: Optional[str] = dataclasses.field(default='build-and-test', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow_name'), 'exclude': lambda f: f is None }})
    r"""Workflow name for fetching information"""
    

