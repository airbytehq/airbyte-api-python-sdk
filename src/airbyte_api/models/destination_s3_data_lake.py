"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Any, Dict, Final, Optional, Union


class DestinationS3DataLakeSchemasCatalogType(str, Enum):
    REST = 'REST'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestCatalog:
    r"""Configuration details for connecting to a REST catalog."""
    namespace: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namespace') }})
    r"""The namespace to be used in the Table identifier.
               This will ONLY be used if the `Destination Namespace` setting for the connection is set to
               `Destination-defined` or `Source-defined`
    """
    server_uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server_uri') }})
    r"""The base URL of the Rest server used to connect to the Rest catalog."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    catalog_type: Optional[DestinationS3DataLakeSchemasCatalogType] = dataclasses.field(default=DestinationS3DataLakeSchemasCatalogType.REST, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalog_type'), 'exclude': lambda f: f is None }})
    



class DestinationS3DataLakeCatalogType(str, Enum):
    GLUE = 'GLUE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GlueCatalog:
    r"""Configuration details for connecting to an AWS Glue-based Iceberg catalog."""
    database_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('database_name') }})
    r"""The Glue database name. This will ONLY be used if the `Destination Namespace` setting for the connection is set to `Destination-defined` or `Source-defined`"""
    glue_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('glue_id') }})
    r"""The AWS Account ID associated with the Glue service used by the Iceberg catalog."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    catalog_type: Optional[DestinationS3DataLakeCatalogType] = dataclasses.field(default=DestinationS3DataLakeCatalogType.GLUE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalog_type'), 'exclude': lambda f: f is None }})
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role_arn'), 'exclude': lambda f: f is None }})
    r"""The ARN of the AWS role to assume. Only usable in Airbyte Cloud."""
    



class DestinationS3DataLakeSchemasCatalogTypeCatalogType(str, Enum):
    NESSIE = 'NESSIE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NessieCatalog:
    r"""Configuration details for connecting to a Nessie-based Iceberg catalog."""
    namespace: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namespace') }})
    r"""The Nessie namespace to be used in the Table identifier.
               This will ONLY be used if the `Destination Namespace` setting for the connection is set to
               `Destination-defined` or `Source-defined`
    """
    server_uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server_uri') }})
    r"""The base URL of the Nessie server used to connect to the Nessie catalog."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_token'), 'exclude': lambda f: f is None }})
    r"""Optional token for authentication with the Nessie server."""
    catalog_type: Optional[DestinationS3DataLakeSchemasCatalogTypeCatalogType] = dataclasses.field(default=DestinationS3DataLakeSchemasCatalogTypeCatalogType.NESSIE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalog_type'), 'exclude': lambda f: f is None }})
    



class S3DataLake(str, Enum):
    S3_DATA_LAKE = 's3-data-lake'


class DestinationS3DataLakeS3BucketRegion(str, Enum):
    r"""The region of the S3 bucket. See <a href=\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions\\">here</a> for all region codes."""
    UNKNOWN = ''
    AF_SOUTH_1 = 'af-south-1'
    AP_EAST_1 = 'ap-east-1'
    AP_NORTHEAST_1 = 'ap-northeast-1'
    AP_NORTHEAST_2 = 'ap-northeast-2'
    AP_NORTHEAST_3 = 'ap-northeast-3'
    AP_SOUTH_1 = 'ap-south-1'
    AP_SOUTH_2 = 'ap-south-2'
    AP_SOUTHEAST_1 = 'ap-southeast-1'
    AP_SOUTHEAST_2 = 'ap-southeast-2'
    AP_SOUTHEAST_3 = 'ap-southeast-3'
    AP_SOUTHEAST_4 = 'ap-southeast-4'
    CA_CENTRAL_1 = 'ca-central-1'
    CA_WEST_1 = 'ca-west-1'
    CN_NORTH_1 = 'cn-north-1'
    CN_NORTHWEST_1 = 'cn-northwest-1'
    EU_CENTRAL_1 = 'eu-central-1'
    EU_CENTRAL_2 = 'eu-central-2'
    EU_NORTH_1 = 'eu-north-1'
    EU_SOUTH_1 = 'eu-south-1'
    EU_SOUTH_2 = 'eu-south-2'
    EU_WEST_1 = 'eu-west-1'
    EU_WEST_2 = 'eu-west-2'
    EU_WEST_3 = 'eu-west-3'
    IL_CENTRAL_1 = 'il-central-1'
    ME_CENTRAL_1 = 'me-central-1'
    ME_SOUTH_1 = 'me-south-1'
    SA_EAST_1 = 'sa-east-1'
    US_EAST_1 = 'us-east-1'
    US_EAST_2 = 'us-east-2'
    US_GOV_EAST_1 = 'us-gov-east-1'
    US_GOV_WEST_1 = 'us-gov-west-1'
    US_WEST_1 = 'us-west-1'
    US_WEST_2 = 'us-west-2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DestinationS3DataLake:
    r"""Defines the configurations required to connect to an Iceberg catalog, including warehouse location, main branch name, and catalog type specifics."""
    catalog_type: CatalogType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalog_type') }})
    r"""Specifies the type of Iceberg catalog (e.g., NESSIE, GLUE, REST) and its associated configuration."""
    s3_bucket_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3_bucket_name') }})
    r"""The name of the S3 bucket that will host the Iceberg data."""
    s3_bucket_region: DestinationS3DataLakeS3BucketRegion = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3_bucket_region') }})
    r"""The region of the S3 bucket. See <a href=\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions\\">here</a> for all region codes."""
    warehouse_location: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warehouse_location') }})
    r"""The root location of the data warehouse used by the Iceberg catalog. Typically includes a bucket name and path within that bucket. For AWS Glue and Nessie, must include the storage protocol (such as \\"s3://\\" for Amazon S3)."""
    access_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_key_id'), 'exclude': lambda f: f is None }})
    r"""The AWS Access Key ID with permissions for S3 and Glue operations."""
    DESTINATION_TYPE: Final[S3DataLake] = dataclasses.field(default=S3DataLake.S3_DATA_LAKE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationType') }})
    main_branch_name: Optional[str] = dataclasses.field(default='main', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('main_branch_name'), 'exclude': lambda f: f is None }})
    r"""The primary or default branch name in the catalog. Most query engines will use \\"main\\" by default. See <a href=\\"https://iceberg.apache.org/docs/latest/branching/\\">Iceberg documentation</a> for more information."""
    s3_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3_endpoint'), 'exclude': lambda f: f is None }})
    r"""Your S3 endpoint url. Read more <a href=\\"https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use\\">here</a>"""
    secret_access_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret_access_key'), 'exclude': lambda f: f is None }})
    r"""The AWS Secret Access Key paired with the Access Key ID for AWS authentication."""
    


CatalogType = Union[NessieCatalog, GlueCatalog, RestCatalog]
