"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Any, Dict, Final, List, Optional, Union


class SourceSapHanaEnterpriseSchemasCursorMethod(str, Enum):
    CDC = 'cdc'


class SourceSapHanaEnterpriseInvalidCDCPositionBehaviorAdvanced(str, Enum):
    r"""Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss."""
    FAIL_SYNC = 'Fail sync'
    RE_SYNC_DATA = 'Re-sync data'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSapHanaEnterpriseReadChangesUsingChangeDataCaptureCDC:
    r"""<i>Recommended</i> - Incrementally reads new inserts, updates, and deletes using change data capture feature. This must be enabled on your database."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    cursor_method: Optional[SourceSapHanaEnterpriseSchemasCursorMethod] = dataclasses.field(default=SourceSapHanaEnterpriseSchemasCursorMethod.CDC, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cursor_method'), 'exclude': lambda f: f is None }})
    initial_load_timeout_hours: Optional[int] = dataclasses.field(default=8, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initial_load_timeout_hours'), 'exclude': lambda f: f is None }})
    r"""The amount of time an initial load is allowed to continue for before catching up on CDC events."""
    invalid_cdc_cursor_position_behavior: Optional[SourceSapHanaEnterpriseInvalidCDCPositionBehaviorAdvanced] = dataclasses.field(default=SourceSapHanaEnterpriseInvalidCDCPositionBehaviorAdvanced.FAIL_SYNC, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalid_cdc_cursor_position_behavior'), 'exclude': lambda f: f is None }})
    r"""Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss."""
    



class SourceSapHanaEnterpriseCursorMethod(str, Enum):
    USER_DEFINED = 'user_defined'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSapHanaEnterpriseScanChangesWithUserDefinedCursor:
    r"""Incrementally detects new inserts and updates using the <a href=\\"https://docs.airbyte.com/understanding-airbyte/connections/incremental-append/#user-defined-cursor\\">cursor column</a> chosen when configuring a connection (e.g. created_at, updated_at)."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    cursor_method: Optional[SourceSapHanaEnterpriseCursorMethod] = dataclasses.field(default=SourceSapHanaEnterpriseCursorMethod.USER_DEFINED, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cursor_method'), 'exclude': lambda f: f is None }})
    



class SourceSapHanaEnterpriseSchemasEncryptionEncryptionMethod(str, Enum):
    ENCRYPTED_VERIFY_CERTIFICATE = 'encrypted_verify_certificate'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSapHanaEnterpriseTLSEncryptedVerifyCertificate:
    r"""Verify and use the certificate provided by the server."""
    ssl_certificate: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssl_certificate') }})
    r"""Privacy Enhanced Mail (PEM) files are concatenated certificate containers frequently used in certificate installations."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    encryption_method: Optional[SourceSapHanaEnterpriseSchemasEncryptionEncryptionMethod] = dataclasses.field(default=SourceSapHanaEnterpriseSchemasEncryptionEncryptionMethod.ENCRYPTED_VERIFY_CERTIFICATE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryption_method'), 'exclude': lambda f: f is None }})
    



class SourceSapHanaEnterpriseEncryptionAlgorithm(str, Enum):
    r"""This parameter defines what encryption algorithm is used."""
    AES256 = 'AES256'
    RC4_56 = 'RC4_56'
    THREE_DES168 = '3DES168'


class SourceSapHanaEnterpriseSchemasEncryptionMethod(str, Enum):
    CLIENT_NNE = 'client_nne'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSapHanaEnterpriseNativeNetworkEncryptionNNE:
    r"""The native network encryption gives you the ability to encrypt database connections, without the configuration overhead of TCP/IP and SSL/TLS and without the need to open and listen on different ports."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    encryption_algorithm: Optional[SourceSapHanaEnterpriseEncryptionAlgorithm] = dataclasses.field(default=SourceSapHanaEnterpriseEncryptionAlgorithm.AES256, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryption_algorithm'), 'exclude': lambda f: f is None }})
    r"""This parameter defines what encryption algorithm is used."""
    encryption_method: Optional[SourceSapHanaEnterpriseSchemasEncryptionMethod] = dataclasses.field(default=SourceSapHanaEnterpriseSchemasEncryptionMethod.CLIENT_NNE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryption_method'), 'exclude': lambda f: f is None }})
    



class SourceSapHanaEnterpriseEncryptionMethod(str, Enum):
    UNENCRYPTED = 'unencrypted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSapHanaEnterpriseUnencrypted:
    r"""Data transfer will not be encrypted."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    encryption_method: Optional[SourceSapHanaEnterpriseEncryptionMethod] = dataclasses.field(default=SourceSapHanaEnterpriseEncryptionMethod.UNENCRYPTED, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryption_method'), 'exclude': lambda f: f is None }})
    



class SapHanaEnterprise(str, Enum):
    SAP_HANA_ENTERPRISE = 'sap-hana-enterprise'


class SourceSapHanaEnterpriseSchemasTunnelMethodTunnelMethod(str, Enum):
    SSH_PASSWORD_AUTH = 'SSH_PASSWORD_AUTH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSapHanaEnterprisePasswordAuthentication:
    r"""Connect through a jump server tunnel host using username and password authentication"""
    tunnel_host: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_host') }})
    r"""Hostname of the jump server host that allows inbound ssh tunnel."""
    tunnel_user: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_user') }})
    r"""OS-level username for logging into the jump server host"""
    tunnel_user_password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_user_password') }})
    r"""OS-level password for logging into the jump server host"""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    tunnel_method: Optional[SourceSapHanaEnterpriseSchemasTunnelMethodTunnelMethod] = dataclasses.field(default=SourceSapHanaEnterpriseSchemasTunnelMethodTunnelMethod.SSH_PASSWORD_AUTH, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_method'), 'exclude': lambda f: f is None }})
    tunnel_port: Optional[int] = dataclasses.field(default=22, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_port'), 'exclude': lambda f: f is None }})
    r"""Port on the proxy/jump server that accepts inbound ssh connections."""
    



class SourceSapHanaEnterpriseSchemasTunnelMethod(str, Enum):
    SSH_KEY_AUTH = 'SSH_KEY_AUTH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSapHanaEnterpriseSSHKeyAuthentication:
    r"""Connect through a jump server tunnel host using username and ssh key"""
    ssh_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssh_key') }})
    r"""OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )"""
    tunnel_host: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_host') }})
    r"""Hostname of the jump server host that allows inbound ssh tunnel."""
    tunnel_user: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_user') }})
    r"""OS-level username for logging into the jump server host"""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    tunnel_method: Optional[SourceSapHanaEnterpriseSchemasTunnelMethod] = dataclasses.field(default=SourceSapHanaEnterpriseSchemasTunnelMethod.SSH_KEY_AUTH, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_method'), 'exclude': lambda f: f is None }})
    tunnel_port: Optional[int] = dataclasses.field(default=22, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_port'), 'exclude': lambda f: f is None }})
    r"""Port on the proxy/jump server that accepts inbound ssh connections."""
    



class SourceSapHanaEnterpriseTunnelMethod(str, Enum):
    NO_TUNNEL = 'NO_TUNNEL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSapHanaEnterpriseNoTunnel:
    r"""No ssh tunnel needed to connect to database"""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    tunnel_method: Optional[SourceSapHanaEnterpriseTunnelMethod] = dataclasses.field(default=SourceSapHanaEnterpriseTunnelMethod.NO_TUNNEL, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_method'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSapHanaEnterprise:
    cursor: SourceSapHanaEnterpriseUpdateMethod = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cursor') }})
    r"""Configures how data is extracted from the database."""
    encryption: SourceSapHanaEnterpriseEncryption = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryption') }})
    r"""The encryption method with is used when communicating with the database."""
    host: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host') }})
    r"""Hostname of the database."""
    tunnel_method: SourceSapHanaEnterpriseSSHTunnelMethod = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_method') }})
    r"""Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use."""
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})
    r"""The username which is used to access the database."""
    check_privileges: Optional[bool] = dataclasses.field(default=True, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('check_privileges'), 'exclude': lambda f: f is None }})
    r"""When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature."""
    checkpoint_target_interval_seconds: Optional[int] = dataclasses.field(default=300, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkpoint_target_interval_seconds'), 'exclude': lambda f: f is None }})
    r"""How often (in seconds) a stream should checkpoint, when possible."""
    concurrency: Optional[int] = dataclasses.field(default=1, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concurrency'), 'exclude': lambda f: f is None }})
    r"""Maximum number of concurrent queries to the database."""
    jdbc_url_params: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jdbc_url_params'), 'exclude': lambda f: f is None }})
    r"""Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3)."""
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""The password associated with the username."""
    port: Optional[int] = dataclasses.field(default=443, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})
    r"""Port of the database.
    SapHana Corporations recommends the following port numbers:
    443 - Default listening port for SAP HANA cloud client connections to the listener.
    """
    schemas: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemas'), 'exclude': lambda f: f is None }})
    r"""The list of schemas to sync from. Defaults to user. Case sensitive."""
    SOURCE_TYPE: Final[SapHanaEnterprise] = dataclasses.field(default=SapHanaEnterprise.SAP_HANA_ENTERPRISE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    


SourceSapHanaEnterpriseUpdateMethod = Union[SourceSapHanaEnterpriseScanChangesWithUserDefinedCursor, SourceSapHanaEnterpriseReadChangesUsingChangeDataCaptureCDC]

SourceSapHanaEnterpriseEncryption = Union[SourceSapHanaEnterpriseUnencrypted, SourceSapHanaEnterpriseNativeNetworkEncryptionNNE, SourceSapHanaEnterpriseTLSEncryptedVerifyCertificate]

SourceSapHanaEnterpriseSSHTunnelMethod = Union[SourceSapHanaEnterpriseNoTunnel, SourceSapHanaEnterpriseSSHKeyAuthentication, SourceSapHanaEnterprisePasswordAuthentication]
