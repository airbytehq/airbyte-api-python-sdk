"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Final, List, Optional, Union


class SourceGoogleSheetsSchemasAuthType(str, Enum):
    SERVICE = 'Service'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceGoogleSheetsServiceAccountKeyAuthentication:
    service_account_info: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_account_info') }})
    r"""The JSON key of the service account to use for authorization. Read more <a href=\\"https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys\\">here</a>."""
    AUTH_TYPE: Final[SourceGoogleSheetsSchemasAuthType] = dataclasses.field(default=SourceGoogleSheetsSchemasAuthType.SERVICE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_type') }})
    



class SourceGoogleSheetsAuthType(str, Enum):
    CLIENT = 'Client'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceGoogleSheetsAuthenticateViaGoogleOAuth:
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_id') }})
    r"""Enter your Google application's Client ID. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information."""
    client_secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_secret') }})
    r"""Enter your Google application's Client Secret. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information."""
    refresh_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token') }})
    r"""Enter your Google application's refresh token. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information."""
    AUTH_TYPE: Final[SourceGoogleSheetsAuthType] = dataclasses.field(default=SourceGoogleSheetsAuthType.CLIENT, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_type') }})
    



class SourceGoogleSheetsGoogleSheets(str, Enum):
    GOOGLE_SHEETS = 'google-sheets'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StreamNameOverrides:
    custom_stream_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_stream_name') }})
    r"""The name you want this stream to appear as in Airbyte and your destination."""
    source_stream_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_stream_name') }})
    r"""The exact name of the sheet/tab in your Google Spreadsheet."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceGoogleSheets:
    credentials: SourceGoogleSheetsAuthentication = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credentials') }})
    r"""Credentials for connecting to the Google Sheets API"""
    spreadsheet_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spreadsheet_id') }})
    r"""Enter the link to the Google spreadsheet you want to sync. To copy the link, click the 'Share' button in the top-right corner of the spreadsheet, then click 'Copy link'."""
    allow_leading_numbers: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_leading_numbers'), 'exclude': lambda f: f is None }})
    r"""Allows column names to start with numbers. Example: \\"50th Percentile\\" → \\"50_th_percentile\\" This option will only work if \\"Convert Column Names to SQL-Compliant Format (names_conversion)\\" is enabled."""
    batch_size: Optional[int] = dataclasses.field(default=1000000, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batch_size'), 'exclude': lambda f: f is None }})
    r"""Default value is 1000000. An integer representing row batch size for each sent request to Google Sheets API. Row batch size means how many rows are processed from the google sheet, for example default value 1000000 would process rows 2-1000002, then 1000003-2000003 and so on. Based on <a href='https://developers.google.com/sheets/api/limits'>Google Sheets API limits documentation</a>, it is possible to send up to 300 requests per minute, but each individual request has to be processed under 180 seconds, otherwise the request returns a timeout error. In regards to this information, consider network speed and number of columns of the google sheet when deciding a batch_size value."""
    combine_letter_number_pairs: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('combine_letter_number_pairs'), 'exclude': lambda f: f is None }})
    r"""Combines adjacent letters and numbers. Example: \\"Q3 2023\\" → \\"q3_2023\\" This option will only work if \\"Convert Column Names to SQL-Compliant Format (names_conversion)\\" is enabled."""
    combine_number_word_pairs: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('combine_number_word_pairs'), 'exclude': lambda f: f is None }})
    r"""Combines adjacent numbers and words. Example: \\"50th Percentile?\\" → \\"_50th_percentile_\\" This option will only work if \\"Convert Column Names to SQL-Compliant Format (names_conversion)\\" is enabled."""
    names_conversion: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('names_conversion'), 'exclude': lambda f: f is None }})
    r"""Converts column names to a SQL-compliant format (snake_case, lowercase, etc). If enabled, you can further customize the sanitization using the options below."""
    remove_leading_trailing_underscores: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remove_leading_trailing_underscores'), 'exclude': lambda f: f is None }})
    r"""Removes leading and trailing underscores from column names. Does not remove leading underscores from column names that start with a number. Example: \\"50th Percentile? \\"→ \\"_50_th_percentile\\" This option will only work if \\"Convert Column Names to SQL-Compliant Format (names_conversion)\\" is enabled."""
    remove_special_characters: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remove_special_characters'), 'exclude': lambda f: f is None }})
    r"""Removes all special characters from column names. Example: \\"Example ID*\\" → \\"example_id\\" This option will only work if \\"Convert Column Names to SQL-Compliant Format (names_conversion)\\" is enabled."""
    SOURCE_TYPE: Final[SourceGoogleSheetsGoogleSheets] = dataclasses.field(default=SourceGoogleSheetsGoogleSheets.GOOGLE_SHEETS, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    stream_name_overrides: Optional[List[StreamNameOverrides]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream_name_overrides'), 'exclude': lambda f: f is None }})
    r"""**Overridden streams will default to Sync Mode: Full Refresh (Append), which does not support primary keys. If you want to use primary keys and deduplication, update the sync mode to \\"Full Refresh | Overwrite + Deduped\\" in your connection settings.**
    Allows you to rename streams (Google Sheet tab names) as they appear in Airbyte. 
    Each item should be an object with a `source_stream_name` (the exact name of the sheet/tab in your spreadsheet)  and a `custom_stream_name` (the name you want it to appear as in Airbyte and the destination).
    If a `source_stream_name` is not found in your spreadsheet, it will be ignored and the default name will be used. This feature only affects stream (sheet/tab) names, not field/column names.
    If you want to rename fields or column names, you can do so using the Airbyte Mappings feature after your connection is created. See the Airbyte documentation for more details on how to use Mappings.
    Examples:
      - To rename a sheet called \"Sheet1\" to \"sales_data\", and \"2024 Q1\" to \"q1_2024\":
        [
          { \"source_stream_name\": \"Sheet1\", \"custom_stream_name\": \"sales_data\" },
          { \"source_stream_name\": \"2024 Q1\", \"custom_stream_name\": \"q1_2024\" }
        ]
      - If you do not wish to rename any streams, leave this blank.
    """
    


SourceGoogleSheetsAuthentication = Union[SourceGoogleSheetsAuthenticateViaGoogleOAuth, SourceGoogleSheetsServiceAccountKeyAuthentication]
