"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Any, Dict, Final, List, Optional, Union


class SourceOracleEnterpriseSchemasConnectionType(str, Enum):
    SID = 'sid'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceOracleEnterpriseSystemIDSID:
    r"""Use Oracle System Identifier."""
    sid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sid') }})
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    connection_type: Optional[SourceOracleEnterpriseSchemasConnectionType] = dataclasses.field(default=SourceOracleEnterpriseSchemasConnectionType.SID, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connection_type'), 'exclude': lambda f: f is None }})
    



class SourceOracleEnterpriseConnectionType(str, Enum):
    SERVICE_NAME = 'service_name'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceOracleEnterpriseServiceName:
    r"""Use service name."""
    service_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_name') }})
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    connection_type: Optional[SourceOracleEnterpriseConnectionType] = dataclasses.field(default=SourceOracleEnterpriseConnectionType.SERVICE_NAME, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connection_type'), 'exclude': lambda f: f is None }})
    



class SourceOracleEnterpriseSchemasCursorMethod(str, Enum):
    CDC = 'cdc'


class SourceOracleEnterpriseInvalidCDCPositionBehaviorAdvanced(str, Enum):
    r"""Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss."""
    FAIL_SYNC = 'Fail sync'
    RE_SYNC_DATA = 'Re-sync data'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC:
    r"""<i>Recommended</i> - Incrementally reads new inserts, updates, and deletes using Oracle's <a href=\\"https://docs.airbyte.com/integrations/enterprise-connectors/source-oracle#getting-started\\"> change data capture feature</a>. This must be enabled on your database."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    cursor_method: Optional[SourceOracleEnterpriseSchemasCursorMethod] = dataclasses.field(default=SourceOracleEnterpriseSchemasCursorMethod.CDC, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cursor_method'), 'exclude': lambda f: f is None }})
    debezium_shutdown_timeout_seconds: Optional[int] = dataclasses.field(default=60, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debezium_shutdown_timeout_seconds'), 'exclude': lambda f: f is None }})
    r"""The amount of time to allow the Debezium Engine to shut down, in seconds."""
    initial_load_timeout_hours: Optional[int] = dataclasses.field(default=8, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initial_load_timeout_hours'), 'exclude': lambda f: f is None }})
    r"""The amount of time an initial load is allowed to continue for before catching up on CDC events."""
    invalid_cdc_cursor_position_behavior: Optional[SourceOracleEnterpriseInvalidCDCPositionBehaviorAdvanced] = dataclasses.field(default=SourceOracleEnterpriseInvalidCDCPositionBehaviorAdvanced.FAIL_SYNC, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalid_cdc_cursor_position_behavior'), 'exclude': lambda f: f is None }})
    r"""Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss."""
    



class SourceOracleEnterpriseCursorMethod(str, Enum):
    USER_DEFINED = 'user_defined'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceOracleEnterpriseScanChangesWithUserDefinedCursor:
    r"""Incrementally detects new inserts and updates using the <a href=\\"https://docs.airbyte.com/understanding-airbyte/connections/incremental-append/#user-defined-cursor\\">cursor column</a> chosen when configuring a connection (e.g. created_at, updated_at)."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    cursor_method: Optional[SourceOracleEnterpriseCursorMethod] = dataclasses.field(default=SourceOracleEnterpriseCursorMethod.USER_DEFINED, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cursor_method'), 'exclude': lambda f: f is None }})
    



class SourceOracleEnterpriseSchemasEncryptionEncryptionMethod(str, Enum):
    ENCRYPTED_VERIFY_CERTIFICATE = 'encrypted_verify_certificate'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceOracleEnterpriseTLSEncryptedVerifyCertificate:
    r"""Verify and use the certificate provided by the server."""
    ssl_certificate: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssl_certificate') }})
    r"""Privacy Enhanced Mail (PEM) files are concatenated certificate containers frequently used in certificate installations."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    encryption_method: Optional[SourceOracleEnterpriseSchemasEncryptionEncryptionMethod] = dataclasses.field(default=SourceOracleEnterpriseSchemasEncryptionEncryptionMethod.ENCRYPTED_VERIFY_CERTIFICATE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryption_method'), 'exclude': lambda f: f is None }})
    



class SourceOracleEnterpriseEncryptionAlgorithm(str, Enum):
    r"""This parameter defines what encryption algorithm is used."""
    AES256 = 'AES256'
    AES192 = 'AES192'
    AES128 = 'AES128'
    THREE_DES168 = '3DES168'
    THREE_DES112 = '3DES112'
    DES = 'DES'


class SourceOracleEnterpriseSchemasEncryptionMethod(str, Enum):
    CLIENT_NNE = 'client_nne'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceOracleEnterpriseNativeNetworkEncryptionNNE:
    r"""The native network encryption gives you the ability to encrypt database connections, without the configuration overhead of TCP/IP and SSL/TLS and without the need to open and listen on different ports."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    encryption_algorithm: Optional[SourceOracleEnterpriseEncryptionAlgorithm] = dataclasses.field(default=SourceOracleEnterpriseEncryptionAlgorithm.AES256, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryption_algorithm'), 'exclude': lambda f: f is None }})
    r"""This parameter defines what encryption algorithm is used."""
    encryption_method: Optional[SourceOracleEnterpriseSchemasEncryptionMethod] = dataclasses.field(default=SourceOracleEnterpriseSchemasEncryptionMethod.CLIENT_NNE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryption_method'), 'exclude': lambda f: f is None }})
    



class SourceOracleEnterpriseEncryptionMethod(str, Enum):
    UNENCRYPTED = 'unencrypted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceOracleEnterpriseUnencrypted:
    r"""Data transfer will not be encrypted."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    encryption_method: Optional[SourceOracleEnterpriseEncryptionMethod] = dataclasses.field(default=SourceOracleEnterpriseEncryptionMethod.UNENCRYPTED, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryption_method'), 'exclude': lambda f: f is None }})
    



class OracleEnterprise(str, Enum):
    ORACLE_ENTERPRISE = 'oracle-enterprise'


class SourceOracleEnterpriseSchemasTunnelMethodTunnelMethod(str, Enum):
    SSH_PASSWORD_AUTH = 'SSH_PASSWORD_AUTH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceOracleEnterprisePasswordAuthentication:
    r"""Connect through a jump server tunnel host using username and password authentication"""
    tunnel_host: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_host') }})
    r"""Hostname of the jump server host that allows inbound ssh tunnel."""
    tunnel_user: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_user') }})
    r"""OS-level username for logging into the jump server host"""
    tunnel_user_password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_user_password') }})
    r"""OS-level password for logging into the jump server host"""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    tunnel_method: Optional[SourceOracleEnterpriseSchemasTunnelMethodTunnelMethod] = dataclasses.field(default=SourceOracleEnterpriseSchemasTunnelMethodTunnelMethod.SSH_PASSWORD_AUTH, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_method'), 'exclude': lambda f: f is None }})
    tunnel_port: Optional[int] = dataclasses.field(default=22, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_port'), 'exclude': lambda f: f is None }})
    r"""Port on the proxy/jump server that accepts inbound ssh connections."""
    



class SourceOracleEnterpriseSchemasTunnelMethod(str, Enum):
    SSH_KEY_AUTH = 'SSH_KEY_AUTH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceOracleEnterpriseSSHKeyAuthentication:
    r"""Connect through a jump server tunnel host using username and ssh key"""
    ssh_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssh_key') }})
    r"""OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )"""
    tunnel_host: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_host') }})
    r"""Hostname of the jump server host that allows inbound ssh tunnel."""
    tunnel_user: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_user') }})
    r"""OS-level username for logging into the jump server host"""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    tunnel_method: Optional[SourceOracleEnterpriseSchemasTunnelMethod] = dataclasses.field(default=SourceOracleEnterpriseSchemasTunnelMethod.SSH_KEY_AUTH, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_method'), 'exclude': lambda f: f is None }})
    tunnel_port: Optional[int] = dataclasses.field(default=22, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_port'), 'exclude': lambda f: f is None }})
    r"""Port on the proxy/jump server that accepts inbound ssh connections."""
    



class SourceOracleEnterpriseTunnelMethod(str, Enum):
    NO_TUNNEL = 'NO_TUNNEL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceOracleEnterpriseNoTunnel:
    r"""No ssh tunnel needed to connect to database"""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    tunnel_method: Optional[SourceOracleEnterpriseTunnelMethod] = dataclasses.field(default=SourceOracleEnterpriseTunnelMethod.NO_TUNNEL, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_method'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceOracleEnterprise:
    connection_data: SourceOracleEnterpriseConnectBy = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connection_data') }})
    r"""The scheme by which to establish a database connection."""
    cursor: SourceOracleEnterpriseUpdateMethod = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cursor') }})
    r"""Configures how data is extracted from the database."""
    encryption: SourceOracleEnterpriseEncryption = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryption') }})
    r"""The encryption method with is used when communicating with the database."""
    host: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host') }})
    r"""Hostname of the database."""
    tunnel_method: SourceOracleEnterpriseSSHTunnelMethod = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tunnel_method') }})
    r"""Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use."""
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})
    r"""The username which is used to access the database."""
    check_privileges: Optional[bool] = dataclasses.field(default=True, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('check_privileges'), 'exclude': lambda f: f is None }})
    r"""When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature."""
    checkpoint_target_interval_seconds: Optional[int] = dataclasses.field(default=300, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkpoint_target_interval_seconds'), 'exclude': lambda f: f is None }})
    r"""How often (in seconds) a stream should checkpoint, when possible."""
    concurrency: Optional[int] = dataclasses.field(default=1, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concurrency'), 'exclude': lambda f: f is None }})
    r"""Maximum number of concurrent queries to the database."""
    jdbc_url_params: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jdbc_url_params'), 'exclude': lambda f: f is None }})
    r"""Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3)."""
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""The password associated with the username."""
    port: Optional[int] = dataclasses.field(default=1521, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})
    r"""Port of the database.
    Oracle Corporations recommends the following port numbers:
    1521 - Default listening port for client connections to the listener. 
    2484 - Recommended and officially registered listening port for client connections to the listener using TCP/IP with SSL.
    """
    schemas: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemas'), 'exclude': lambda f: f is None }})
    r"""The list of schemas to sync from. Defaults to user. Case sensitive."""
    SOURCE_TYPE: Final[OracleEnterprise] = dataclasses.field(default=OracleEnterprise.ORACLE_ENTERPRISE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    


SourceOracleEnterpriseConnectBy = Union[SourceOracleEnterpriseServiceName, SourceOracleEnterpriseSystemIDSID]

SourceOracleEnterpriseUpdateMethod = Union[SourceOracleEnterpriseScanChangesWithUserDefinedCursor, SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC]

SourceOracleEnterpriseEncryption = Union[SourceOracleEnterpriseUnencrypted, SourceOracleEnterpriseNativeNetworkEncryptionNNE, SourceOracleEnterpriseTLSEncryptedVerifyCertificate]

SourceOracleEnterpriseSSHTunnelMethod = Union[SourceOracleEnterpriseNoTunnel, SourceOracleEnterpriseSSHKeyAuthentication, SourceOracleEnterprisePasswordAuthentication]
