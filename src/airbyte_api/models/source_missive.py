"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from typing import Final, Optional


class Kind(str, Enum):
    r"""Kind parameter for `contact_groups` stream"""
    GROUP = 'group'
    ORGANIZATION = 'organization'


class Missive(str, Enum):
    MISSIVE = 'missive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceMissive:
    api_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_key') }})
    start_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    kind: Optional[Kind] = dataclasses.field(default=Kind.GROUP, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Kind parameter for `contact_groups` stream"""
    limit: Optional[str] = dataclasses.field(default='50', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""Max records per page limit"""
    SOURCE_TYPE: Final[Missive] = dataclasses.field(default=Missive.MISSIVE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    

