"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from typing import Final, List, Optional, Union


class SourceSharepointEnterpriseSchemasAuthType(str, Enum):
    SERVICE = 'Service'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseServiceKeyAuthentication:
    r"""ServiceCredentials class for service key authentication.
    This class is structured similarly to OAuthCredentials but for a different authentication method.
    """
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_id') }})
    r"""Client ID of your Microsoft developer application"""
    client_secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_secret') }})
    r"""Client Secret of your Microsoft developer application"""
    tenant_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenant_id') }})
    r"""Tenant ID of the Microsoft SharePoint user"""
    user_principal_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_principal_name') }})
    r"""Special characters such as a period, comma, space, and the at sign (@) are converted to underscores (_). More details: https://learn.microsoft.com/en-us/sharepoint/list-onedrive-urls"""
    AUTH_TYPE: Final[Optional[SourceSharepointEnterpriseSchemasAuthType]] = dataclasses.field(default=SourceSharepointEnterpriseSchemasAuthType.SERVICE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_type'), 'exclude': lambda f: f is None }})
    



class SourceSharepointEnterpriseAuthType(str, Enum):
    CLIENT = 'Client'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseAuthenticateViaMicrosoftOAuth:
    r"""OAuthCredentials class to hold authentication details for Microsoft OAuth authentication.
    This class uses pydantic for data validation and settings management.
    """
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_id') }})
    r"""Client ID of your Microsoft developer application"""
    client_secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_secret') }})
    r"""Client Secret of your Microsoft developer application"""
    tenant_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenant_id') }})
    r"""Tenant ID of the Microsoft SharePoint user"""
    AUTH_TYPE: Final[Optional[SourceSharepointEnterpriseAuthType]] = dataclasses.field(default=SourceSharepointEnterpriseAuthType.CLIENT, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_type'), 'exclude': lambda f: f is None }})
    refresh_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token'), 'exclude': lambda f: f is None }})
    r"""Refresh Token of your Microsoft developer application"""
    



class SourceSharepointEnterpriseSchemasDeliveryMethodDeliveryType(str, Enum):
    USE_PERMISSIONS_TRANSFER = 'use_permissions_transfer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseReplicatePermissionsACL:
    r"""Sends one identity stream and one for more permissions (ACL) streams to the destination. This data can be used in downstream systems to recreate permission restrictions mirroring the original source."""
    DELIVERY_TYPE: Final[Optional[SourceSharepointEnterpriseSchemasDeliveryMethodDeliveryType]] = dataclasses.field(default=SourceSharepointEnterpriseSchemasDeliveryMethodDeliveryType.USE_PERMISSIONS_TRANSFER, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delivery_type'), 'exclude': lambda f: f is None }})
    include_identities_stream: Optional[bool] = dataclasses.field(default=True, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('include_identities_stream'), 'exclude': lambda f: f is None }})
    r"""This data can be used in downstream systems to recreate permission restrictions mirroring the original source"""
    



class SourceSharepointEnterpriseSchemasDeliveryType(str, Enum):
    USE_FILE_TRANSFER = 'use_file_transfer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseCopyRawFiles:
    r"""Copy raw files without parsing their contents. Bits are copied into the destination exactly as they appeared in the source. Recommended for use with unstructured text data, non-text and compressed files."""
    DELIVERY_TYPE: Final[Optional[SourceSharepointEnterpriseSchemasDeliveryType]] = dataclasses.field(default=SourceSharepointEnterpriseSchemasDeliveryType.USE_FILE_TRANSFER, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delivery_type'), 'exclude': lambda f: f is None }})
    preserve_directory_structure: Optional[bool] = dataclasses.field(default=True, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preserve_directory_structure'), 'exclude': lambda f: f is None }})
    r"""If enabled, sends subdirectory folder structure along with source file names to the destination. Otherwise, files will be synced by their names only. This option is ignored when file-based replication is not enabled."""
    



class SourceSharepointEnterpriseDeliveryType(str, Enum):
    USE_RECORDS_TRANSFER = 'use_records_transfer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseReplicateRecords:
    r"""Recommended - Extract and load structured records into your destination of choice. This is the classic method of moving data in Airbyte. It allows for blocking and hashing individual fields or files from a structured schema. Data can be flattened, typed and deduped depending on the destination."""
    DELIVERY_TYPE: Final[Optional[SourceSharepointEnterpriseDeliveryType]] = dataclasses.field(default=SourceSharepointEnterpriseDeliveryType.USE_RECORDS_TRANSFER, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delivery_type'), 'exclude': lambda f: f is None }})
    



class SourceSharepointEnterpriseSearchScope(str, Enum):
    r"""Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both."""
    ACCESSIBLE_DRIVES = 'ACCESSIBLE_DRIVES'
    SHARED_ITEMS = 'SHARED_ITEMS'
    ALL = 'ALL'


class SourceSharepointEnterpriseSharepointEnterprise(str, Enum):
    SHAREPOINT_ENTERPRISE = 'sharepoint-enterprise'


class SourceSharepointEnterpriseSchemasStreamsFormatFormat6Filetype(str, Enum):
    EXCEL = 'excel'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseExcelFormat:
    FILETYPE: Final[Optional[SourceSharepointEnterpriseSchemasStreamsFormatFormat6Filetype]] = dataclasses.field(default=SourceSharepointEnterpriseSchemasStreamsFormatFormat6Filetype.EXCEL, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filetype'), 'exclude': lambda f: f is None }})
    



class SourceSharepointEnterpriseSchemasStreamsFormatFormatFiletype(str, Enum):
    UNSTRUCTURED = 'unstructured'


class SourceSharepointEnterpriseMode(str, Enum):
    LOCAL = 'local'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseLocal:
    r"""Process files locally, supporting `fast` and `ocr` modes. This is the default option."""
    MODE: Final[Optional[SourceSharepointEnterpriseMode]] = dataclasses.field(default=SourceSharepointEnterpriseMode.LOCAL, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    



class SourceSharepointEnterpriseParsingStrategy(str, Enum):
    r"""The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf"""
    AUTO = 'auto'
    FAST = 'fast'
    OCR_ONLY = 'ocr_only'
    HI_RES = 'hi_res'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseUnstructuredDocumentFormat:
    r"""Extract text from document formats (.pdf, .docx, .md, .pptx) and emit as one record per file."""
    FILETYPE: Final[Optional[SourceSharepointEnterpriseSchemasStreamsFormatFormatFiletype]] = dataclasses.field(default=SourceSharepointEnterpriseSchemasStreamsFormatFormatFiletype.UNSTRUCTURED, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filetype'), 'exclude': lambda f: f is None }})
    processing: Optional[SourceSharepointEnterpriseProcessing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing'), 'exclude': lambda f: f is None }})
    r"""Processing configuration"""
    skip_unprocessable_files: Optional[bool] = dataclasses.field(default=True, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_unprocessable_files'), 'exclude': lambda f: f is None }})
    r"""If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync."""
    strategy: Optional[SourceSharepointEnterpriseParsingStrategy] = dataclasses.field(default=SourceSharepointEnterpriseParsingStrategy.AUTO, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('strategy'), 'exclude': lambda f: f is None }})
    r"""The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf"""
    



class SourceSharepointEnterpriseSchemasStreamsFormatFiletype(str, Enum):
    PARQUET = 'parquet'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseParquetFormat:
    decimal_as_float: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decimal_as_float'), 'exclude': lambda f: f is None }})
    r"""Whether to convert decimal fields to floats. There is a loss of precision when converting decimals to floats, so this is not recommended."""
    FILETYPE: Final[Optional[SourceSharepointEnterpriseSchemasStreamsFormatFiletype]] = dataclasses.field(default=SourceSharepointEnterpriseSchemasStreamsFormatFiletype.PARQUET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filetype'), 'exclude': lambda f: f is None }})
    



class SourceSharepointEnterpriseSchemasStreamsFiletype(str, Enum):
    JSONL = 'jsonl'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseJsonlFormat:
    FILETYPE: Final[Optional[SourceSharepointEnterpriseSchemasStreamsFiletype]] = dataclasses.field(default=SourceSharepointEnterpriseSchemasStreamsFiletype.JSONL, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filetype'), 'exclude': lambda f: f is None }})
    



class SourceSharepointEnterpriseSchemasFiletype(str, Enum):
    CSV = 'csv'


class SourceSharepointEnterpriseSchemasStreamsHeaderDefinitionType(str, Enum):
    USER_PROVIDED = 'User Provided'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseUserProvided:
    column_names: List[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('column_names') }})
    r"""The column names that will be used while emitting the CSV records"""
    HEADER_DEFINITION_TYPE: Final[Optional[SourceSharepointEnterpriseSchemasStreamsHeaderDefinitionType]] = dataclasses.field(default=SourceSharepointEnterpriseSchemasStreamsHeaderDefinitionType.USER_PROVIDED, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('header_definition_type'), 'exclude': lambda f: f is None }})
    



class SourceSharepointEnterpriseSchemasHeaderDefinitionType(str, Enum):
    AUTOGENERATED = 'Autogenerated'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseAutogenerated:
    HEADER_DEFINITION_TYPE: Final[Optional[SourceSharepointEnterpriseSchemasHeaderDefinitionType]] = dataclasses.field(default=SourceSharepointEnterpriseSchemasHeaderDefinitionType.AUTOGENERATED, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('header_definition_type'), 'exclude': lambda f: f is None }})
    



class SourceSharepointEnterpriseHeaderDefinitionType(str, Enum):
    FROM_CSV = 'From CSV'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseFromCSV:
    HEADER_DEFINITION_TYPE: Final[Optional[SourceSharepointEnterpriseHeaderDefinitionType]] = dataclasses.field(default=SourceSharepointEnterpriseHeaderDefinitionType.FROM_CSV, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('header_definition_type'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseCSVFormat:
    delimiter: Optional[str] = dataclasses.field(default=',', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delimiter'), 'exclude': lambda f: f is None }})
    r"""The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'."""
    double_quote: Optional[bool] = dataclasses.field(default=True, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('double_quote'), 'exclude': lambda f: f is None }})
    r"""Whether two quotes in a quoted CSV value denote a single quote in the data."""
    encoding: Optional[str] = dataclasses.field(default='utf8', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encoding'), 'exclude': lambda f: f is None }})
    r"""The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href=\\"https://docs.python.org/3/library/codecs.html#standard-encodings\\" target=\\"_blank\\">list of python encodings</a> for allowable options."""
    escape_char: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('escape_char'), 'exclude': lambda f: f is None }})
    r"""The character used for escaping special characters. To disallow escaping, leave this field blank."""
    false_values: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('false_values'), 'exclude': lambda f: f is None }})
    r"""A set of case-sensitive strings that should be interpreted as false values."""
    FILETYPE: Final[Optional[SourceSharepointEnterpriseSchemasFiletype]] = dataclasses.field(default=SourceSharepointEnterpriseSchemasFiletype.CSV, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filetype'), 'exclude': lambda f: f is None }})
    header_definition: Optional[SourceSharepointEnterpriseCSVHeaderDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('header_definition'), 'exclude': lambda f: f is None }})
    r"""How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows."""
    ignore_errors_on_fields_mismatch: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignore_errors_on_fields_mismatch'), 'exclude': lambda f: f is None }})
    r"""Whether to ignore errors that occur when the number of fields in the CSV does not match the number of columns in the schema."""
    null_values: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('null_values'), 'exclude': lambda f: f is None }})
    r"""A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field."""
    quote_char: Optional[str] = dataclasses.field(default='"', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quote_char'), 'exclude': lambda f: f is None }})
    r"""The character used for quoting CSV values. To disallow quoting, make this field blank."""
    skip_rows_after_header: Optional[int] = dataclasses.field(default=0, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_rows_after_header'), 'exclude': lambda f: f is None }})
    r"""The number of rows to skip after the header row."""
    skip_rows_before_header: Optional[int] = dataclasses.field(default=0, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_rows_before_header'), 'exclude': lambda f: f is None }})
    r"""The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field."""
    strings_can_be_null: Optional[bool] = dataclasses.field(default=True, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('strings_can_be_null'), 'exclude': lambda f: f is None }})
    r"""Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself."""
    true_values: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('true_values'), 'exclude': lambda f: f is None }})
    r"""A set of case-sensitive strings that should be interpreted as true values."""
    



class SourceSharepointEnterpriseFiletype(str, Enum):
    AVRO = 'avro'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseAvroFormat:
    double_as_string: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('double_as_string'), 'exclude': lambda f: f is None }})
    r"""Whether to convert double fields to strings. This is recommended if you have decimal numbers with a high degree of precision because there can be a loss precision when handling floating point numbers."""
    FILETYPE: Final[Optional[SourceSharepointEnterpriseFiletype]] = dataclasses.field(default=SourceSharepointEnterpriseFiletype.AVRO, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filetype'), 'exclude': lambda f: f is None }})
    



class SourceSharepointEnterpriseValidationPolicy(str, Enum):
    r"""The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema."""
    EMIT_RECORD = 'Emit Record'
    SKIP_RECORD = 'Skip Record'
    WAIT_FOR_DISCOVER = 'Wait for Discover'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterpriseFileBasedStreamConfig:
    format: SourceSharepointEnterpriseFormat = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format') }})
    r"""The configuration options that are used to alter how to read incoming files that deviate from the standard formatting."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the stream."""
    days_to_sync_if_history_is_full: Optional[int] = dataclasses.field(default=3, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days_to_sync_if_history_is_full'), 'exclude': lambda f: f is None }})
    r"""When the state history of the file store is full, syncs will only read files that were last modified in the provided day range."""
    globs: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('globs'), 'exclude': lambda f: f is None }})
    r"""The pattern used to specify which files should be selected from the file system. For more information on glob pattern matching look <a href=\\"https://en.wikipedia.org/wiki/Glob_(programming)\\">here</a>."""
    input_schema: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input_schema'), 'exclude': lambda f: f is None }})
    r"""The schema that will be used to validate records extracted from the file. This will override the stream schema that is auto-detected from incoming files."""
    recent_n_files_to_read_for_schema_discovery: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recent_n_files_to_read_for_schema_discovery'), 'exclude': lambda f: f is None }})
    r"""The number of resent files which will be used to discover the schema for this stream."""
    schemaless: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemaless'), 'exclude': lambda f: f is None }})
    r"""When enabled, syncs will not validate or structure records against the stream's schema."""
    validation_policy: Optional[SourceSharepointEnterpriseValidationPolicy] = dataclasses.field(default=SourceSharepointEnterpriseValidationPolicy.EMIT_RECORD, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validation_policy'), 'exclude': lambda f: f is None }})
    r"""The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceSharepointEnterprise:
    r"""SourceMicrosoftSharePointSpec class for Microsoft SharePoint Source Specification.
    This class combines the authentication details with additional configuration for the SharePoint API.
    """
    credentials: SourceSharepointEnterpriseAuthentication = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credentials') }})
    r"""Credentials for connecting to the One Drive API"""
    streams: List[SourceSharepointEnterpriseFileBasedStreamConfig] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streams') }})
    r"""Each instance of this configuration defines a <a href=\\"https://docs.airbyte.com/cloud/core-concepts#stream\\">stream</a>. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table."""
    delivery_method: Optional[SourceSharepointEnterpriseDeliveryMethod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delivery_method'), 'exclude': lambda f: f is None }})
    folder_path: Optional[str] = dataclasses.field(default='.', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folder_path'), 'exclude': lambda f: f is None }})
    r"""Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items."""
    search_scope: Optional[SourceSharepointEnterpriseSearchScope] = dataclasses.field(default=SourceSharepointEnterpriseSearchScope.ALL, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search_scope'), 'exclude': lambda f: f is None }})
    r"""Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both."""
    site_url: Optional[str] = dataclasses.field(default='', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site_url'), 'exclude': lambda f: f is None }})
    r"""Url of SharePoint site to search for files. Leave empty to search in the main site. Use 'https://<tenant_name>.sharepoint.com/sites/' to iterate over all sites."""
    SOURCE_TYPE: Final[SourceSharepointEnterpriseSharepointEnterprise] = dataclasses.field(default=SourceSharepointEnterpriseSharepointEnterprise.SHAREPOINT_ENTERPRISE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'exclude': lambda f: f is None }})
    r"""UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated."""
    


SourceSharepointEnterpriseAuthentication = Union[SourceSharepointEnterpriseAuthenticateViaMicrosoftOAuth, SourceSharepointEnterpriseServiceKeyAuthentication]

SourceSharepointEnterpriseDeliveryMethod = Union[SourceSharepointEnterpriseReplicateRecords, SourceSharepointEnterpriseCopyRawFiles, SourceSharepointEnterpriseReplicatePermissionsACL]

SourceSharepointEnterpriseProcessing = Union[SourceSharepointEnterpriseLocal]

SourceSharepointEnterpriseCSVHeaderDefinition = Union[SourceSharepointEnterpriseFromCSV, SourceSharepointEnterpriseAutogenerated, SourceSharepointEnterpriseUserProvided]

SourceSharepointEnterpriseFormat = Union[SourceSharepointEnterpriseAvroFormat, SourceSharepointEnterpriseCSVFormat, SourceSharepointEnterpriseJsonlFormat, SourceSharepointEnterpriseParquetFormat, SourceSharepointEnterpriseUnstructuredDocumentFormat, SourceSharepointEnterpriseExcelFormat]
