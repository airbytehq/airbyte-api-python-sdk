"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Final, Optional


class Breezometer(str, Enum):
    BREEZOMETER = 'breezometer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceBreezometer:
    api_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_key') }})
    r"""Your API Access Key. See <a href=\\"https://docs.breezometer.com/api-documentation/introduction/#authentication/\\">here</a>."""
    latitude: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""Latitude of the monitored location."""
    longitude: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""Longitude of the monitored location."""
    days_to_forecast: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days_to_forecast'), 'exclude': lambda f: f is None }})
    r"""Number of days to forecast. Minimum 1, maximum 3. Valid for Polen and Weather Forecast streams."""
    historic_hours: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('historic_hours'), 'exclude': lambda f: f is None }})
    r"""Number of hours retireve from Air Quality History stream. Minimum 1, maximum 720."""
    hours_to_forecast: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hours_to_forecast'), 'exclude': lambda f: f is None }})
    r"""Number of hours to forecast. Minimum 1, maximum 96. Valid for Air Quality Forecast stream."""
    radius: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('radius'), 'exclude': lambda f: f is None }})
    r"""Desired radius from the location provided. Minimum 5, maximum 100. Valid for Wildfires streams."""
    SOURCE_TYPE: Final[Breezometer] = dataclasses.field(default=Breezometer.BREEZOMETER, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    

