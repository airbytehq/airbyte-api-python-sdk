"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Any, Dict, Final, Optional, Union


class SourceElasticsearchSchemasAuthenticationMethodMethod(str, Enum):
    BASIC = 'basic'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceElasticsearchUsernamePassword:
    r"""Basic auth header with a username and password"""
    password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password') }})
    r"""Basic auth password to access a secure Elasticsearch server"""
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})
    r"""Basic auth username to access a secure Elasticsearch server"""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    METHOD: Final[SourceElasticsearchSchemasAuthenticationMethodMethod] = dataclasses.field(default=SourceElasticsearchSchemasAuthenticationMethodMethod.BASIC, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    



class SourceElasticsearchSchemasMethod(str, Enum):
    SECRET = 'secret'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceElasticsearchAPIKeySecret:
    r"""Use a api key and secret combination to authenticate"""
    api_key_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiKeyId') }})
    r"""The Key ID to used when accessing an enterprise Elasticsearch instance."""
    api_key_secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiKeySecret') }})
    r"""The secret associated with the API Key ID."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    METHOD: Final[SourceElasticsearchSchemasMethod] = dataclasses.field(default=SourceElasticsearchSchemasMethod.SECRET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    



class SourceElasticsearchMethod(str, Enum):
    NONE = 'none'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceElasticsearchNone:
    r"""No authentication will be used"""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    METHOD: Final[SourceElasticsearchMethod] = dataclasses.field(default=SourceElasticsearchMethod.NONE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    



class SourceElasticsearchElasticsearch(str, Enum):
    ELASTICSEARCH = 'elasticsearch'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceElasticsearch:
    endpoint: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpoint') }})
    r"""The full url of the Elasticsearch server"""
    authentication_method: Optional[SourceElasticsearchAuthenticationMethod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authenticationMethod'), 'exclude': lambda f: f is None }})
    r"""The type of authentication to be used"""
    SOURCE_TYPE: Final[SourceElasticsearchElasticsearch] = dataclasses.field(default=SourceElasticsearchElasticsearch.ELASTICSEARCH, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    


SourceElasticsearchAuthenticationMethod = Union[SourceElasticsearchNone, SourceElasticsearchAPIKeySecret, SourceElasticsearchUsernamePassword]
