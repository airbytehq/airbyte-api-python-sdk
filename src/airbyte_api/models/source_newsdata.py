"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Any, Final, List, Optional


class SourceNewsdataCategory(str, Enum):
    BUSINESS = 'business'
    ENTERTAINMENT = 'entertainment'
    ENVIRONMENT = 'environment'
    FOOD = 'food'
    HEALTH = 'health'
    POLITICS = 'politics'
    SCIENCE = 'science'
    SPORTS = 'sports'
    TECHNOLOGY = 'technology'
    TOP = 'top'
    WORLD = 'world'


class SourceNewsdataCountry(str, Enum):
    AR = 'ar'
    AU = 'au'
    AT = 'at'
    BD = 'bd'
    BY = 'by'
    BE = 'be'
    BR = 'br'
    BG = 'bg'
    CA = 'ca'
    CL = 'cl'
    CN = 'cn'
    CO = 'co'
    CR = 'cr'
    CU = 'cu'
    CZ = 'cz'
    DK = 'dk'
    DO = 'do'
    EC = 'ec'
    EG = 'eg'
    EE = 'ee'
    ET = 'et'
    FI = 'fi'
    FR = 'fr'
    DE = 'de'
    GR = 'gr'
    HK = 'hk'
    HU = 'hu'
    IN = 'in'
    ID = 'id'
    IQ = 'iq'
    IE = 'ie'
    IL = 'il'
    IT = 'it'
    JP = 'jp'
    KZ = 'kz'
    KW = 'kw'
    LV = 'lv'
    LB = 'lb'
    LT = 'lt'
    MY = 'my'
    MX = 'mx'
    MA = 'ma'
    MM = 'mm'
    NL = 'nl'
    NZ = 'nz'
    NG = 'ng'
    KP = 'kp'
    NO = 'no'
    PK = 'pk'
    PE = 'pe'
    PH = 'ph'
    PL = 'pl'
    PT = 'pt'
    PR = 'pr'
    RO = 'ro'
    RU = 'ru'
    SA = 'sa'
    RS = 'rs'
    SG = 'sg'
    SK = 'sk'
    SI = 'si'
    ZA = 'za'
    KR = 'kr'
    ES = 'es'
    SE = 'se'
    CH = 'ch'
    TW = 'tw'
    TZ = 'tz'
    TH = 'th'
    TR = 'tr'
    UA = 'ua'
    AE = 'ae'
    GB = 'gb'
    US = 'us'
    VE = 've'
    VI = 'vi'


class SourceNewsdataLanguage(str, Enum):
    BE = 'be'
    AM = 'am'
    AR = 'ar'
    BN = 'bn'
    BS = 'bs'
    BG = 'bg'
    MY = 'my'
    CKB = 'ckb'
    ZH = 'zh'
    HR = 'hr'
    CS = 'cs'
    DA = 'da'
    NL = 'nl'
    EN = 'en'
    ET = 'et'
    FI = 'fi'
    FR = 'fr'
    DE = 'de'
    EL = 'el'
    HE = 'he'
    HI = 'hi'
    HU = 'hu'
    IN = 'in'
    IT = 'it'
    JP = 'jp'
    KO = 'ko'
    LV = 'lv'
    LT = 'lt'
    MS = 'ms'
    NO = 'no'
    PL = 'pl'
    PT = 'pt'
    RO = 'ro'
    RU = 'ru'
    SR = 'sr'
    SK = 'sk'
    SL = 'sl'
    ES = 'es'
    SW = 'sw'
    SV = 'sv'
    TH = 'th'
    TR = 'tr'
    UK = 'uk'
    UR = 'ur'
    VI = 'vi'


class Newsdata(str, Enum):
    NEWSDATA = 'newsdata'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceNewsdata:
    api_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_key') }})
    r"""API Key"""
    one_of: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OneOf'), 'exclude': lambda f: f is None }})
    category: Optional[List[SourceNewsdataCategory]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""Categories (maximum 5) to restrict the search to."""
    country: Optional[List[SourceNewsdataCountry]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""2-letter ISO 3166-1 countries (maximum 5) to restrict the search to."""
    domain: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""Domains (maximum 5) to restrict the search to. Use the sources stream to find top sources id."""
    language: Optional[List[SourceNewsdataLanguage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""Languages (maximum 5) to restrict the search to."""
    SOURCE_TYPE: Final[Newsdata] = dataclasses.field(default=Newsdata.NEWSDATA, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    

