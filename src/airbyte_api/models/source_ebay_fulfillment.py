"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from typing import Final, Optional


class SourceEbayFulfillmentAPIHost(str, Enum):
    HTTPS_API_EBAY_COM = 'https://api.ebay.com'
    HTTPS_API_SANDBOX_EBAY_COM = 'https://api.sandbox.ebay.com'


class SourceEbayFulfillmentRefreshTokenEndpoint(str, Enum):
    HTTPS_API_EBAY_COM_IDENTITY_V1_OAUTH2_TOKEN = 'https://api.ebay.com/identity/v1/oauth2/token'
    HTTPS_API_SANDBOX_EBAY_COM_IDENTITY_V1_OAUTH2_TOKEN = 'https://api.sandbox.ebay.com/identity/v1/oauth2/token'


class EbayFulfillment(str, Enum):
    EBAY_FULFILLMENT = 'ebay-fulfillment'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceEbayFulfillment:
    password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password') }})
    redirect_uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirect_uri') }})
    refresh_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token') }})
    start_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})
    api_host: Optional[SourceEbayFulfillmentAPIHost] = dataclasses.field(default=SourceEbayFulfillmentAPIHost.HTTPS_API_EBAY_COM, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_host'), 'exclude': lambda f: f is None }})
    refresh_token_endpoint: Optional[SourceEbayFulfillmentRefreshTokenEndpoint] = dataclasses.field(default=SourceEbayFulfillmentRefreshTokenEndpoint.HTTPS_API_EBAY_COM_IDENTITY_V1_OAUTH2_TOKEN, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token_endpoint'), 'exclude': lambda f: f is None }})
    SOURCE_TYPE: Final[EbayFulfillment] = dataclasses.field(default=EbayFulfillment.EBAY_FULFILLMENT, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    

