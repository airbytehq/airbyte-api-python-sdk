"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from typing import Any, Final, List, Optional


class Finage(str, Enum):
    FINAGE = 'finage'


class TechnicalIndicatorType(str, Enum):
    r"""One of DEMA, EMA, SMA, WMA, RSI, TEMA, Williams, ADX"""
    DEMA = 'DEMA'
    EMA = 'EMA'
    SMA = 'SMA'
    WMA = 'WMA'
    RSI = 'RSI'
    TEMA = 'TEMA'
    WILLIAMS = 'Williams'
    ADX = 'ADX'


class TimeInterval(str, Enum):
    DAILY = 'daily'
    ONEMIN = '1min'
    FIVEMIN = '5min'
    FIFTEENMIN = '15min'
    THIRTYMIN = '30min'
    ONEHOUR = '1hour'
    FOURHOUR = '4hour'


class TimeAggregates(str, Enum):
    r"""Size of the time"""
    MINUTE = 'minute'
    HOUR = 'hour'
    DAY = 'day'
    WEEK = 'week'
    MONTH = 'month'
    QUARTER = 'quarter'
    YEAR = 'year'


class TimePeriod(str, Enum):
    r"""Time Period for cash flow stmts"""
    ANNUAL = 'annual'
    QUARTER = 'quarter'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceFinage:
    api_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_key') }})
    start_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    symbols: List[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbols') }})
    r"""List of symbols"""
    period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Time period. Default is 10"""
    SOURCE_TYPE: Final[Finage] = dataclasses.field(default=Finage.FINAGE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    tech_indicator_type: Optional[TechnicalIndicatorType] = dataclasses.field(default=TechnicalIndicatorType.SMA, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tech_indicator_type'), 'exclude': lambda f: f is None }})
    r"""One of DEMA, EMA, SMA, WMA, RSI, TEMA, Williams, ADX"""
    time: Optional[TimeInterval] = dataclasses.field(default=TimeInterval.DAILY, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    time_aggregates: Optional[TimeAggregates] = dataclasses.field(default=TimeAggregates.DAY, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_aggregates'), 'exclude': lambda f: f is None }})
    r"""Size of the time"""
    time_period: Optional[TimePeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_period'), 'exclude': lambda f: f is None }})
    r"""Time Period for cash flow stmts"""
    

