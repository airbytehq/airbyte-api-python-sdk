"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte_api import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Final, List, Optional


class ServiceDetails(str, Enum):
    ESCALATION_POLICIES = 'escalation_policies'
    TEAMS = 'teams'
    INTEGRATIONS = 'integrations'
    AUTO_PAUSE_NOTIFICATIONS_PARAMETERS = 'auto_pause_notifications_parameters'


class Pagerduty(str, Enum):
    PAGERDUTY = 'pagerduty'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourcePagerduty:
    token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token') }})
    r"""API key for PagerDuty API authentication"""
    cutoff_days: Optional[int] = dataclasses.field(default=90, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cutoff_days'), 'exclude': lambda f: f is None }})
    r"""Fetch pipelines updated in the last number of days"""
    default_severity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_severity'), 'exclude': lambda f: f is None }})
    r"""A default severity category if not present"""
    exclude_services: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_services'), 'exclude': lambda f: f is None }})
    r"""List of PagerDuty service names to ignore incidents from. If not set, all incidents will be pulled."""
    incident_log_entries_overview: Optional[bool] = dataclasses.field(default=True, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('incident_log_entries_overview'), 'exclude': lambda f: f is None }})
    r"""If true, will return a subset of log entries that show only the most important changes to the incident."""
    max_retries: Optional[int] = dataclasses.field(default=5, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_retries'), 'exclude': lambda f: f is None }})
    r"""Maximum number of PagerDuty API request retries to perform upon connection errors. The source will pause for an exponentially increasing number of seconds before retrying."""
    page_size: Optional[int] = dataclasses.field(default=25, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""page size to use when querying PagerDuty API"""
    service_details: Optional[List[ServiceDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_details'), 'exclude': lambda f: f is None }})
    r"""List of PagerDuty service additional details to include."""
    SOURCE_TYPE: Final[Pagerduty] = dataclasses.field(default=Pagerduty.PAGERDUTY, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    

