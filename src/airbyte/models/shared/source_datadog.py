"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Optional

class SourceDatadogQueriesDataSource(str, Enum):
    r"""A data source that is powered by the platform."""
    METRICS = 'metrics'
    CLOUD_COST = 'cloud_cost'
    LOGS = 'logs'
    RUM = 'rum'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class SourceDatadogQueries:
    data_source: SourceDatadogQueriesDataSource = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_source') }})
    r"""A data source that is powered by the platform."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The variable name for use in queries."""
    query: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query') }})
    r"""A classic query string."""
    


class SourceDatadogSite(str, Enum):
    r"""The site where Datadog data resides in."""
    DATADOGHQ_COM = 'datadoghq.com'
    US3_DATADOGHQ_COM = 'us3.datadoghq.com'
    US5_DATADOGHQ_COM = 'us5.datadoghq.com'
    DATADOGHQ_EU = 'datadoghq.eu'
    DDOG_GOV_COM = 'ddog-gov.com'

class SourceDatadogDatadog(str, Enum):
    DATADOG = 'datadog'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class SourceDatadog:
    r"""The values required to configure the source."""
    api_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_key') }})
    r"""Datadog API key"""
    application_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('application_key') }})
    r"""Datadog application key"""
    source_type: SourceDatadogDatadog = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_date'), 'exclude': lambda f: f is None }})
    r"""UTC date and time in the format 2017-01-25T00:00:00Z. Data after this date will  not be replicated. An empty value will represent the current datetime for each  execution. This just applies to Incremental syncs."""
    max_records_per_request: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_records_per_request'), 'exclude': lambda f: f is None }})
    r"""Maximum number of records to collect per request."""
    queries: Optional[list[SourceDatadogQueries]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queries'), 'exclude': lambda f: f is None }})
    r"""List of queries to be run and used as inputs."""
    query: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query'), 'exclude': lambda f: f is None }})
    r"""The search query. This just applies to Incremental syncs. If empty, it'll collect all logs."""
    site: Optional[SourceDatadogSite] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site'), 'exclude': lambda f: f is None }})
    r"""The site where Datadog data resides in."""
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'exclude': lambda f: f is None }})
    r"""UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. This just applies to Incremental syncs."""
    

