"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte import utils
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from typing import Final, List, Optional

class AuthMethod(str, Enum):
    OAUTH2_0 = 'oauth2.0'

class ReportingDataObject(str, Enum):
    r"""The name of the the object derives from the ReportRequest object. You can find it in Bing Ads Api docs - Reporting API - Reporting Data Objects."""
    ACCOUNT_PERFORMANCE_REPORT_REQUEST = 'AccountPerformanceReportRequest'
    AD_DYNAMIC_TEXT_PERFORMANCE_REPORT_REQUEST = 'AdDynamicTextPerformanceReportRequest'
    AD_EXTENSION_BY_AD_REPORT_REQUEST = 'AdExtensionByAdReportRequest'
    AD_EXTENSION_BY_KEYWORD_REPORT_REQUEST = 'AdExtensionByKeywordReportRequest'
    AD_EXTENSION_DETAIL_REPORT_REQUEST = 'AdExtensionDetailReportRequest'
    AD_GROUP_PERFORMANCE_REPORT_REQUEST = 'AdGroupPerformanceReportRequest'
    AD_PERFORMANCE_REPORT_REQUEST = 'AdPerformanceReportRequest'
    AGE_GENDER_AUDIENCE_REPORT_REQUEST = 'AgeGenderAudienceReportRequest'
    AUDIENCE_PERFORMANCE_REPORT_REQUEST = 'AudiencePerformanceReportRequest'
    CALL_DETAIL_REPORT_REQUEST = 'CallDetailReportRequest'
    CAMPAIGN_PERFORMANCE_REPORT_REQUEST = 'CampaignPerformanceReportRequest'
    CONVERSION_PERFORMANCE_REPORT_REQUEST = 'ConversionPerformanceReportRequest'
    DESTINATION_URL_PERFORMANCE_REPORT_REQUEST = 'DestinationUrlPerformanceReportRequest'
    DSA_AUTO_TARGET_PERFORMANCE_REPORT_REQUEST = 'DSAAutoTargetPerformanceReportRequest'
    DSA_CATEGORY_PERFORMANCE_REPORT_REQUEST = 'DSACategoryPerformanceReportRequest'
    DSA_SEARCH_QUERY_PERFORMANCE_REPORT_REQUEST = 'DSASearchQueryPerformanceReportRequest'
    GEOGRAPHIC_PERFORMANCE_REPORT_REQUEST = 'GeographicPerformanceReportRequest'
    GOALS_AND_FUNNELS_REPORT_REQUEST = 'GoalsAndFunnelsReportRequest'
    HOTEL_DIMENSION_PERFORMANCE_REPORT_REQUEST = 'HotelDimensionPerformanceReportRequest'
    HOTEL_GROUP_PERFORMANCE_REPORT_REQUEST = 'HotelGroupPerformanceReportRequest'
    KEYWORD_PERFORMANCE_REPORT_REQUEST = 'KeywordPerformanceReportRequest'
    NEGATIVE_KEYWORD_CONFLICT_REPORT_REQUEST = 'NegativeKeywordConflictReportRequest'
    PRODUCT_DIMENSION_PERFORMANCE_REPORT_REQUEST = 'ProductDimensionPerformanceReportRequest'
    PRODUCT_MATCH_COUNT_REPORT_REQUEST = 'ProductMatchCountReportRequest'
    PRODUCT_NEGATIVE_KEYWORD_CONFLICT_REPORT_REQUEST = 'ProductNegativeKeywordConflictReportRequest'
    PRODUCT_PARTITION_PERFORMANCE_REPORT_REQUEST = 'ProductPartitionPerformanceReportRequest'
    PRODUCT_PARTITION_UNIT_PERFORMANCE_REPORT_REQUEST = 'ProductPartitionUnitPerformanceReportRequest'
    PRODUCT_SEARCH_QUERY_PERFORMANCE_REPORT_REQUEST = 'ProductSearchQueryPerformanceReportRequest'
    PROFESSIONAL_DEMOGRAPHICS_AUDIENCE_REPORT_REQUEST = 'ProfessionalDemographicsAudienceReportRequest'
    PUBLISHER_USAGE_PERFORMANCE_REPORT_REQUEST = 'PublisherUsagePerformanceReportRequest'
    SEARCH_CAMPAIGN_CHANGE_HISTORY_REPORT_REQUEST = 'SearchCampaignChangeHistoryReportRequest'
    SEARCH_QUERY_PERFORMANCE_REPORT_REQUEST = 'SearchQueryPerformanceReportRequest'
    SHARE_OF_VOICE_REPORT_REQUEST = 'ShareOfVoiceReportRequest'
    USER_LOCATION_PERFORMANCE_REPORT_REQUEST = 'UserLocationPerformanceReportRequest'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomReportConfig:
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the custom report, this name would be used as stream name"""
    report_columns: List[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_columns') }})
    r"""A list of available report object columns. You can find it in description of reporting object that you want to add to custom report."""
    reporting_object: ReportingDataObject = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reporting_object') }})
    r"""The name of the the object derives from the ReportRequest object. You can find it in Bing Ads Api docs - Reporting API - Reporting Data Objects."""
    report_aggregation: Optional[str] = dataclasses.field(default='[Hourly]', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_aggregation'), 'exclude': lambda f: f is None }})
    r"""A list of available aggregations."""
    


class SourceBingAdsBingAds(str, Enum):
    BING_ADS = 'bing-ads'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceBingAds:
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_id') }})
    r"""The Client ID of your Microsoft Advertising developer application."""
    developer_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('developer_token') }})
    r"""Developer token associated with user. See more info <a href=\\"https://docs.microsoft.com/en-us/advertising/guides/get-started?view=bingads-13#get-developer-token\\"> in the docs</a>."""
    refresh_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token') }})
    r"""Refresh Token to renew the expired Access Token."""
    SOURCE_TYPE: Final[SourceBingAdsBingAds] = dataclasses.field(default=SourceBingAdsBingAds.BING_ADS, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    AUTH_METHOD: Final[Optional[AuthMethod]] = dataclasses.field(default=AuthMethod.OAUTH2_0, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_method'), 'exclude': lambda f: f is None }})
    client_secret: Optional[str] = dataclasses.field(default='', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_secret'), 'exclude': lambda f: f is None }})
    r"""The Client Secret of your Microsoft Advertising developer application."""
    custom_reports: Optional[List[CustomReportConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_reports'), 'exclude': lambda f: f is None }})
    r"""You can add your Custom Bing Ads report by creating one."""
    lookback_window: Optional[int] = dataclasses.field(default=0, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lookback_window'), 'exclude': lambda f: f is None }})
    r"""Also known as attribution or conversion window. How far into the past to look for records (in days). If your conversion window has an hours/minutes granularity, round it up to the number of days exceeding. Used only for performance report streams in incremental mode without specified Reports Start Date."""
    reports_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reports_start_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'exclude': lambda f: f is None }})
    r"""The start date from which to begin replicating report data. Any data generated before this date will not be replicated in reports. This is a UTC date in YYYY-MM-DD format. If not set, data from previous and current calendar year will be replicated."""
    tenant_id: Optional[str] = dataclasses.field(default='common', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenant_id'), 'exclude': lambda f: f is None }})
    r"""The Tenant ID of your Microsoft Advertising developer application. Set this to \\"common\\" unless you know you need a different value."""
    

