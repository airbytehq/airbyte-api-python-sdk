"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from airbyte import utils
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from typing import Final, Optional, Union

class SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthType(str, Enum):
    ACCESS_TOKEN = 'access_token'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class SourceSmartsheetsAuthorizationMethodAPIAccessToken:
    access_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_token') }})
    r"""The access token to use for accessing your data from Smartsheets. This access token must be generated by a user with at least read access to the data you'd like to replicate. Generate an access token in the Smartsheets main menu by clicking Account > Apps & Integrations > API Access. See the <a href=\\"https://docs.airbyte.com/integrations/sources/smartsheets/#setup-guide\\">setup guide</a> for information on how to obtain this token."""
    AUTH_TYPE: Final[Optional[SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthType]] = dataclasses.field(default=SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthType.ACCESS_TOKEN, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_type'), 'exclude': lambda f: f is None }})
    


class SourceSmartsheetsAuthorizationMethodOAuth20AuthType(str, Enum):
    OAUTH2_0 = 'oauth2.0'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class SourceSmartsheetsAuthorizationMethodOAuth20:
    access_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_token') }})
    r"""Access Token for making authenticated requests."""
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_id') }})
    r"""The API ID of the SmartSheets developer application."""
    client_secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_secret') }})
    r"""The API Secret the SmartSheets developer application."""
    refresh_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token') }})
    r"""The key to refresh the expired access_token."""
    token_expiry_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token_expiry_date'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""The date-time when the access token should be refreshed."""
    AUTH_TYPE: Final[Optional[SourceSmartsheetsAuthorizationMethodOAuth20AuthType]] = dataclasses.field(default=SourceSmartsheetsAuthorizationMethodOAuth20AuthType.OAUTH2_0, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_type'), 'exclude': lambda f: f is None }})
    




@dataclasses.dataclass
class SourceSmartsheetsAuthorizationMethod:
    pass

class SourceSmartsheetsValidenums(str, Enum):
    SHEETCREATED_AT = 'sheetcreatedAt'
    SHEETID = 'sheetid'
    SHEETMODIFIED_AT = 'sheetmodifiedAt'
    SHEETNAME = 'sheetname'
    SHEETPERMALINK = 'sheetpermalink'
    SHEETVERSION = 'sheetversion'
    SHEETACCESS_LEVEL = 'sheetaccess_level'
    ROW_ID = 'row_id'
    ROW_ACCESS_LEVEL = 'row_access_level'
    ROW_CREATED_AT = 'row_created_at'
    ROW_CREATED_BY = 'row_created_by'
    ROW_EXPANDED = 'row_expanded'
    ROW_MODIFIED_BY = 'row_modified_by'
    ROW_PARENT_ID = 'row_parent_id'
    ROW_PERMALINK = 'row_permalink'
    ROW_NUMBER = 'row_number'
    ROW_VERSION = 'row_version'

class SourceSmartsheetsSmartsheets(str, Enum):
    SMARTSHEETS = 'smartsheets'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class SourceSmartsheets:
    r"""The values required to configure the source."""
    credentials: Union[SourceSmartsheetsAuthorizationMethodOAuth20, SourceSmartsheetsAuthorizationMethodAPIAccessToken] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credentials') }})
    spreadsheet_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spreadsheet_id') }})
    r"""The spreadsheet ID. Find it by opening the spreadsheet then navigating to File > Properties"""
    SOURCE_TYPE: Final[SourceSmartsheetsSmartsheets] = dataclasses.field(default=SourceSmartsheetsSmartsheets.SMARTSHEETS, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    metadata_fields: Optional[list[SourceSmartsheetsValidenums]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata_fields'), 'exclude': lambda f: f is None }})
    r"""A List of available columns which metadata can be pulled from."""
    start_datetime: Optional[datetime] = dataclasses.field(default=dateutil.parser.isoparse('2020-01-01T00:00:00+00:00'), metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_datetime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'exclude': lambda f: f is None }})
    r"""Only rows modified after this date/time will be replicated. This should be an ISO 8601 string, for instance: `2000-01-01T13:00:00`"""
    

