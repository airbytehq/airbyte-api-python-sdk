"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Final, List, Optional

class Vectara(str, Enum):
    VECTARA = 'vectara'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OAuth20Credentials:
    r"""OAuth2.0 credentials used to authenticate admin actions (creating/deleting corpora)"""
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_id') }})
    r"""OAuth2.0 client id"""
    client_secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_secret') }})
    r"""OAuth2.0 client secret"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DestinationVectara:
    r"""Configuration to connect to the Vectara instance"""
    corpus_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corpus_name') }})
    r"""The Name of Corpus to load data into"""
    customer_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_id') }})
    r"""Your customer id as it is in the authenticaion url"""
    oauth2: OAuth20Credentials = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oauth2') }})
    r"""OAuth2.0 credentials used to authenticate admin actions (creating/deleting corpora)"""
    DESTINATION_TYPE: Final[Vectara] = dataclasses.field(default=Vectara.VECTARA, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationType') }})
    metadata_fields: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata_fields'), 'exclude': lambda f: f is None }})
    r"""List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path."""
    parallelize: Optional[bool] = dataclasses.field(default=False, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parallelize'), 'exclude': lambda f: f is None }})
    r"""Parallelize indexing into Vectara with multiple threads"""
    text_fields: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text_fields'), 'exclude': lambda f: f is None }})
    r"""List of fields in the record that should be in the section of the document. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array."""
    

