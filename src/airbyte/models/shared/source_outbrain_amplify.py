"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from airbyte import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Any, Optional

class SourceOutbrainAmplifyCredentialsUsernamePasswordBothUsernameAndPasswordIsRequiredForAuthenticationRequest(str, Enum):
    USERNAME_PASSWORD = 'username_password'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class SourceOutbrainAmplifyCredentialsUsernamePassword:
    r"""Credentials for making authenticated requests requires either username/password or access_token."""
    password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password') }})
    r"""Add Password for authentication."""
    type: SourceOutbrainAmplifyCredentialsUsernamePasswordBothUsernameAndPasswordIsRequiredForAuthenticationRequest = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})
    r"""Add Username for authentication."""
    


class SourceOutbrainAmplifyCredentialsAccessTokenAccessTokenIsRequiredForAuthenticationRequests(str, Enum):
    ACCESS_TOKEN = 'access_token'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class SourceOutbrainAmplifyCredentialsAccessToken:
    r"""Credentials for making authenticated requests requires either username/password or access_token."""
    access_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_token') }})
    r"""Access Token for making authenticated requests."""
    type: SourceOutbrainAmplifyCredentialsAccessTokenAccessTokenIsRequiredForAuthenticationRequests = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    


class SourceOutbrainAmplifyGranularityForGeoLocationRegion(str, Enum):
    r"""The granularity used for geo location data in reports."""
    COUNTRY = 'country'
    REGION = 'region'
    SUBREGION = 'subregion'

class SourceOutbrainAmplifyGranularityForPeriodicReports(str, Enum):
    r"""The granularity used for periodic data in reports. See <a href=\\"https://amplifyv01.docs.apiary.io/#reference/performance-reporting/periodic/retrieve-performance-statistics-for-all-marketer-campaigns-by-periodic-breakdown\\">the docs</a>."""
    DAILY = 'daily'
    WEEKLY = 'weekly'
    MONTHLY = 'monthly'

class SourceOutbrainAmplifyOutbrainAmplify(str, Enum):
    OUTBRAIN_AMPLIFY = 'outbrain-amplify'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class SourceOutbrainAmplify:
    r"""The values required to configure the source."""
    credentials: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credentials') }})
    r"""Credentials for making authenticated requests requires either username/password or access_token."""
    source_type: SourceOutbrainAmplifyOutbrainAmplify = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceType') }})
    start_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date') }})
    r"""Date in the format YYYY-MM-DD eg. 2017-01-25. Any data before this date will not be replicated."""
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_date'), 'exclude': lambda f: f is None }})
    r"""Date in the format YYYY-MM-DD."""
    geo_location_breakdown: Optional[SourceOutbrainAmplifyGranularityForGeoLocationRegion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geo_location_breakdown'), 'exclude': lambda f: f is None }})
    r"""The granularity used for geo location data in reports."""
    report_granularity: Optional[SourceOutbrainAmplifyGranularityForPeriodicReports] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_granularity'), 'exclude': lambda f: f is None }})
    r"""The granularity used for periodic data in reports. See <a href=\\"https://amplifyv01.docs.apiary.io/#reference/performance-reporting/periodic/retrieve-performance-statistics-for-all-marketer-campaigns-by-periodic-breakdown\\">the docs</a>."""
    

